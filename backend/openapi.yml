openapi: 3.0.3
info:
  title: Aido Todo API
  description: REST API for managing todo lists and items
  version: 1.0.0
servers:
  - url: https://api.aido.com
    description: Production server
  - url: https://staging-api.aido.com
    description: Staging server
  - url: http://localhost:5000
    description: Local development server

paths:
  /api/todo-lists:
    get:
      summary: Get all todo lists
      operationId: getTodoLists
      tags:
        - TodoLists
      responses:
        '200':
          description: List of todo lists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TodoListResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Create a new todo list
      operationId: createTodoList
      tags:
        - TodoLists
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTodoListRequest'
      responses:
        '201':
          description: Todo list created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/todo-lists/{listId}:
    get:
      summary: Get a specific todo list
      operationId: getTodoListById
      tags:
        - TodoLists
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Todo list details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoListResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      summary: Update a todo list
      operationId: updateTodoList
      tags:
        - TodoLists
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTodoListRequest'
      responses:
        '200':
          description: Todo list updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Delete a todo list
      operationId: deleteTodoList
      tags:
        - TodoLists
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Todo list deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/todo-lists/{listId}/items:
    post:
      summary: Add an item to a todo list
      operationId: addTodoItem
      tags:
        - TodoItems
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTodoItemRequest'
      responses:
        '201':
          description: Todo item created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoItemResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/todo-lists/{listId}/items/{itemId}:
    put:
      summary: Update a todo item
      operationId: updateTodoItem
      tags:
        - TodoItems
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: itemId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTodoItemRequest'
      responses:
        '200':
          description: Todo item updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoItemResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Remove an item from a todo list
      operationId: removeTodoItem
      tags:
        - TodoItems
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: itemId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Todo item removed successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/todo-lists/{listId}/items/{itemId}/complete:
    put:
      summary: Mark a todo item as completed
      operationId: completeTodoItem
      tags:
        - TodoItems
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: itemId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Todo item marked as completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoItemResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/todo-lists/{listId}/items/{itemId}/incomplete:
    put:
      summary: Mark a todo item as incomplete
      operationId: incompleteTodoItem
      tags:
        - TodoItems
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: itemId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Todo item marked as incomplete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoItemResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    TodoListResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        items:
          type: array
          items:
            $ref: '#/components/schemas/TodoItemResponse'
      required:
        - id
        - name
        - description
        - createdAt
        - updatedAt
        - items

    CreateTodoListRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          maxLength: 1000
      required:
        - name

    UpdateTodoListRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          maxLength: 1000
      required:
        - name

    TodoItemResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        isCompleted:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - title
        - description
        - isCompleted
        - createdAt
        - updatedAt

    CreateTodoItemRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          maxLength: 1000
      required:
        - title

    UpdateTodoItemRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          maxLength: 1000
      required:
        - title

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: array
          items:
            type: string
      required:
        - error
        - message

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'